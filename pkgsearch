#!/usr/bin/env python3

import re
import os
import argparse
from packaging.version import InvalidVersion, parse
import requests
import sys

PRG_NAME = "pkgsearch"
PRG_VERSION = "0.6"

# Only for debugging
DEBUG = False

# Last OpenBSD release
CURRENT_RELEASE = '7.4'

# Change this to the closest mirror
MIRROR_URL = 'https://ftp.spline.de/pub/OpenBSD/'
INDEX_URL = '{0}/7.3/packages/amd64/index.txt'.format(MIRROR_URL)

CACHE_DIR = '{0}/.cache/{1}'.format(os.getenv('HOME'), PRG_NAME)
INDEX_FILE = 'index'
INDEX_PATH = CACHE_DIR + '/' + INDEX_FILE

PKG_EMOJI = '\U0001F4E6'


def check_release(version: str):
    """Checks version for OpenBSD release."""
    try:
        parse(version)
    except InvalidVersion:
        return False

    # Check specific format major.minor for OpenBSD version
    m = re.match(r'^\d{1}.\d{1}$', version)
    if m is None:
        return False

    if (parse(version) > parse(CURRENT_RELEASE)) or (
        parse(version) < parse('2.0')
    ):
        return False

    return True


def create_cache_dir():
    try:
        os.makedirs(CACHE_DIR)
    except FileExistsError:
        if DEBUG:
            print("[INFO] cache directory already existing. Aborting creation.")

        return
    except OSError as e:
        print(f"[ERROR] unable to create cache directory {CACHE_DIR} - {e}")
        sys.exit(0)


def get_index(index_flag: bool):
    if os.path.exists(INDEX_PATH) and not index_flag:
        if DEBUG:
            print("[INFO] .index file already existing. Aborting download.")

        return
    else:
        try:
            r = requests.get(INDEX_URL)
        except requests.exceptions.RequestException as e:
            print(f"[ERROR] unable to get INDEX file from URL - {e}")
            sys.exit(0)

        if r.status_code != 200:
            print(
                f"[ERROR] unable to get INDEX file from URL '{MIRROR_URL}' - HTTP Status-Code = {r.status_code}"
            )
            sys.exit(0)
        else:
            try:
                with open(INDEX_PATH, 'w') as out:
                    try:
                        out.write(r.text)
                    except (IOError, OSError):
                        print(f"[ERROR] Error writing to file {INDEX_PATH}")
                        sys.exit(0)

            except (FileNotFoundError, PermissionError, OSError):
                print(f"[ERROR] Unable to open file {INDEX_PATH} for writing")
                sys.exit(0)


def query_index(needle: str, emoji_flag: bool):
    try:
        f = open(INDEX_PATH, 'r')
    except (FileNotFoundError, PermissionError, OSError):
        print(f"[ERROR] Unable to open file {INDEX_PATH}")
        return

    while True:
        data = f.readline()

        if not data:
            break

        # Removing unneeded information like size and date
        # and convert list to string. Also, remove .tgz
        # extension from the package name/version
        pkg = ' '.join(data.split()[9:])[:-4]

        if re.findall(needle, pkg):
            # Get the size of the given package in bytes
            size_bytes = data.split()[4:5]

            # Convert to megabytes
            size_mbytes = int(size_bytes[0]) / 1048576

            if emoji_flag:
                # 57 was chosen since the longest str was 55 chars
                # This should cover every package name currently in
                # the OpenBSD repository
                print(
                    "{} {:<57} - Size: {:.2f}MB".format(
                        PKG_EMOJI, pkg, size_mbytes
                    )
                )
            else:
                print("{:<57} - Size: {:.2f}MB".format(pkg, size_mbytes))

    f.close()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("package")
    parser.add_argument(
        "-e", "--emoji", help="turn on emoji output", action="store_true"
    )
    parser.add_argument(
        "-i", "--index", help="download index", action="store_true"
    )
    parser.add_argument(
        "-r",
        "--release",
        help=f"release to search for packages (default = {CURRENT_RELEASE})",
        default=CURRENT_RELEASE,
    )
    parser.add_argument(
        "-v",
        "--version",
        help="display version",
        action="version",
        version=f"{PRG_NAME} {PRG_VERSION}",
    )

    args = parser.parse_args()

    if not check_release(args.release):
        print(f"[ERROR] invalid release '{args.release}'")
        sys.exit(0)

    needle = args.package

    create_cache_dir()
    get_index(args.index)

    query_index(needle, args.emoji)


if __name__ == "__main__":
    main()
