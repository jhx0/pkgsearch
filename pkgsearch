#!/usr/bin/env python3

import re
import os
import sys
import emoji
import argparse
import requests
from os.path import exists

PRG_NAME = "pkgsearch"
PRG_VERSION = "0.3"

# Only for debugging
DEBUG = False

# Change this to the closest mirror
INDEX_URL = 'https://ftp.spline.de/pub/OpenBSD/7.3/packages/amd64/index.txt'

HOME_DIR = os.getenv('HOME')
INDEX_DOT = '.index'
INDEX_PATH = HOME_DIR + "/" + INDEX_DOT

# Flags used throughout the program
# Do not change these
emojiFlag = False
indexFlag = False


def getIndex():
    if exists(INDEX_PATH) and not indexFlag:
        if DEBUG:
            print("[INFO] .index file already existing. Aborting download.")

        return
    else:
        try:
            r = requests.get(INDEX_URL)
        except requests.exceptions.RequestException as e:
            print(f"[ERROR] unable to get INDEX file from URL - {e}")
            return

        if r.status_code != 200:
            print(
                f"[ERROR] unable to get INDEX file from URL '{INDEX_URL}' - HTTP Status-Code = {r.status_code}"
            )
            return
        else:
            try:
                with open(INDEX_PATH, 'w') as out:
                    try:
                        out.write(r.text)
                    except (IOError, OSError):
                        print(f"[ERROR] Error writing to file {INDEX_PATH}")

            except (FileNotFoundError, PermissionError, OSError):
                print(f"[ERROR] Unable to open file {INDEX_PATH} for writing")


def _printWrapper(pkg, size_mbytes):
    if emojiFlag:
        # 57 was chosen since the longest str was 55 chars
        # This should cover every package name currently in
        # the OpenBSD repository
        print(
            "{} {:<57} - Size: {:.2f}MB".format(
                emoji.emojize(':package:'), pkg, size_mbytes
            )
        )
    else:
        print("{:<57} - Size: {:.2f}MB".format(pkg, size_mbytes))


def queryIndex(needle):
    try:
        f = open(INDEX_PATH, 'r')
    except (FileNotFoundError, PermissionError, OSError):
        print(f"[ERROR] Unable to open file {INDEX_PATH}")
        return

    while True:
        data = f.readline()

        if not data:
            break

        # Removing unneeded information like size and date
        # and convert list to string. Also, remove .tgz
        # extension from the package name/version
        pkg = ' '.join(data.split()[9:])[:-4]

        if re.findall(needle, pkg):
            # Get the size of the given package in bytes
            size_bytes = data.split()[4:5]

            # Convert to megabytes
            size_mbytes = int(size_bytes[0]) / 1048576

            _printWrapper(pkg, size_mbytes)

    f.close()


def printVersion():
    print("{} {}".format(PRG_NAME, PRG_VERSION))
    sys.exit(0)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("package")
    parser.add_argument(
        "-e", "--emoji", help="turn on emoji output", action="store_true"
    )
    parser.add_argument(
        "-i", "--index", help="download index", action="store_true"
    )

    args = parser.parse_args()

    global emojiFlag
    emojiFlag = args.emoji
    global indexFlag
    indexFlag = args.index

    needle = args.package

    getIndex()

    queryIndex(needle)


if __name__ == "__main__":
    main()
